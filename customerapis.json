{
	"info": {
		"_postman_id": "7908ef37-0e6c-4520-8d62-a719cf341eed",
		"name": "customer flow Copy",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "create_data",
			"item": [
				{
					"name": "create_super_admin",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "2c36873c-9279-40b3-9969-89215cf57da0",
								"exec": [
									"adminEmail = pm.variables.replaceIn('{{$randomEmail}}')",
									"adminPassword = pm.variables.replaceIn('{{$randomPassword}}')",
									"console.log(adminEmail)",
									"pm.environment.set(\"adminEmail\", adminEmail);",
									"pm.environment.set(\"adminPassword\", adminPassword)"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "e65623aa-e55a-4516-b1a7-94ab2b674e84",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"address\": \"12323\",\n    \"cnic\": \"123121113123\",\n    \"cnic_picture\": \"\",\n    \"confirmPassword\": \"{{adminPassword}}\",\n    \"name\": \"test\",\n    \"password\": \"{{adminPassword}}\",\n    \"phone\": \"09007860133\",\n    \"username\": \"{{adminEmail}}\",\n    \"roles\": [1]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl}}/auth/signup",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"auth",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "ADMIN SIGN IN",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "09a124b7-0920-4eb7-846c-775482b8e72e",
								"exec": [
									"response_data = JSON.parse(responseBody);",
									"token = response_data.data.token",
									"pm.environment.set(\"adminToken\", token);",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\"username\": \"{{adminEmail}}\", \"password\": \"{{adminPassword}}\", \"role_id\": [1, 9, 15, 7, 17]}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl}}/auth/signin",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"auth",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "CREATE COMPANY",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "43146d21-0b34-43e8-a4ab-7c831e12e5bc",
								"exec": [
									"response_data = JSON.parse(responseBody);",
									"companyId = response_data.data.id",
									"companyCode = response_data.data.code",
									"pm.environment.set(\"companyId\", companyId);",
									"pm.environment.set(\"companyCode\", companyCode);",
									"pm.environment.set(\"count\", 1);",
									"",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "{{adminToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"{{$randomCatchPhrase}}\", \n    \"code\":\"{{$randomCatchPhrase}}\"\n}"
						},
						"url": {
							"raw": "{{baseurl}}/company",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"company"
							]
						},
						"description": "create company"
					},
					"response": []
				},
				{
					"name": "CREATE BUSINESS UNIT",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "43b0ace6-09bc-44d9-b463-66e5e1ae13b3",
								"exec": [
									"adminEmail = pm.variables.replaceIn('{{$randomAdjective}}')",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "7b0a0e41-b63f-44b5-b7f8-95af699597d2",
								"exec": [
									"responseBody = JSON.parse(responseBody)",
									"buisnessUnitId = responseBody.data.unit.id",
									"pm.environment.set(\"buisnessUnitId\", buisnessUnitId);",
									"",
									"var currentCount = pm.environment.get(\"count\")",
									"if (currentCount > 0){",
									" currentCount = currentCount -1 ;",
									" pm.environment.set(\"count\", currentCount);",
									" postman.setNextRequest(\"CREATE BUSINESS UNIT\");",
									"}",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{adminToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"{{$randomLastName}}\",\n\t\"company_id\": {{companyId}}\n}"
						},
						"url": {
							"raw": "{{baseurl}}/businessUnit",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"businessUnit"
							]
						}
					},
					"response": []
				},
				{
					"name": "CREATE LOCATION",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "e06eea6c-e45e-4cdf-bf81-b19443f2c73b",
								"exec": [
									"companyName = pm.variables.replaceIn('{{$randomCompanyName}}')",
									"pm.environment.set(\"companyName\", companyName);",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "a9407b9c-6945-4368-8084-14bb8a4c7786",
								"exec": [
									"responseBody = JSON.parse(responseBody);",
									"pm.environment.set(\"locationId\", responseBody.data.location.id);",
									"",
									"",
									"pm.test(\"verify company name returned in the response is equal to the one given in the request\", function () {",
									"    pm.expect(responseBody.data.location.name).to.eql(pm.environment.get(\"companyName\"))",
									"});",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "{{adminToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"{{companyName}}\",\n\t\"company_id\": \"{{companyId}}\",\n\t\"business_unit_id\": \"{{buisnessUnitId}}\",\n    \"service_charge_type\": \"FLAT\", \n    \"service_charge_value\": 1.2, \n    \"delivery_charge_type\": \"FLAT\", \n    \"delivery_charge_value\": 1.2\n}"
						},
						"url": {
							"raw": "{{baseurl}}/location",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"location"
							]
						}
					},
					"response": []
				},
				{
					"name": "CREATE PRODUCT CATEGORY ( SUB CAT INCLUDED )",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d08b3975-fbdb-4a62-9833-f6cdddd268f1",
								"exec": [
									"responseBody = JSON.parse(responseBody)",
									"pm.environment.set(\"categoryId\", responseBody.data.id);",
									"",
									"pm.environment.set(\"productsArray\", null);",
									"pm.environment.set(\"productsToCreate\", 10);",
									"",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{adminToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"{{$randomAdjective}}\",\n    \"priority\": 1,\n    \"start_date\": \"2020-06-06T19:36:14\",\n    \"end_date\": \"2020-06-06T19:36:14\",\n    \"location_id\": {{locationId}},\n    \"sub_categories\": [\n        {\n            \"name\": \"chips\",\n            \"location_id\": {{locationId}},\n            \"priority\": 1,\n            \"start_date\": \"2020-06-06T19:36:14\",\n            \"end_date\": \"2021-06-06T19:36:14\"\n        },\n        {\n            \"name\": \"biscuits\",\n            \"priority\": 2,\n            \"location_id\": {{locationId}},\n            \"start_date\": \"2020-06-06T19:36:14\",\n            \"end_date\": \"2021-06-06T19:36:14\"\n        }\n    ]\n}"
						},
						"url": {
							"raw": "{{baseurl}}/categories/createProductCategory",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"categories",
								"createProductCategory"
							]
						}
					},
					"response": []
				},
				{
					"name": "CREATE PRODUCT",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "9b8549d7-e550-4a73-a4d4-9502dd6b0b16",
								"exec": [
									"productSKU = pm.variables.replaceIn('{{$randomPassword}}')",
									"pm.environment.set(\"productSKU\" , productSKU);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "4d1059fb-b8b1-40a6-882f-b90ed3bacc90",
								"exec": [
									"currentCount = pm.environment.get(\"productsToCreate\")",
									"productsArray = pm.environment.get(\"productsArray\");",
									"productSKU = pm.environment.get(\"productSKU\")",
									"",
									"if(productsArray == null)",
									"{",
									"    productsArray = [];",
									"}",
									"",
									"else{",
									"    productsArray = JSON.parse(productsArray)",
									"   ",
									"}",
									"productsArray.push(productSKU)",
									"pm.environment.set(\"productsArray\", JSON.stringify(productsArray));",
									"",
									"",
									"if (currentCount > 0){",
									" currentCount = currentCount -1 ;",
									" pm.environment.set(\"productsToCreate\", currentCount);",
									" postman.setNextRequest(\"CREATE PRODUCT\");",
									"}",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{adminToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"sku\": \"{{productSKU}}\",\n    \"name\": \"gala\",\n    \"size\": \"small\",\n    \"unit\": \"pack\",\n    \"stock_quantity\": 100,\n    \"category_id\": [{{categoryId}}],\n    \"brand\": \"LU\",\n    \"urdu_name\": \"test\",\n    \"urdu_unit\": \"kg\",\n    \"urdu_size\": \"small\",\n    \"urdu_brand\": \"test\",\n    \"disabled\": false,\n    \"barcode\": \"test\",\n    \"description\": \"egg biscuits\",\n    \"consent_required\": false,\n    \"location_id\": {{locationId}},\n    \"price\": 20,\n    \"tax_percent\": 0.5,\n    \"tax_inclusive\": false\n}"
						},
						"url": {
							"raw": "{{baseurl}}/product/createProduct",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"product",
								"createProduct"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "customer_flow",
			"item": [
				{
					"name": "SIGN_IN",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b042ffe4-b504-4300-9c3f-e1fc6694ed9a",
								"exec": [
									"responseBody = JSON.parse(responseBody);",
									"token = responseBody.data.token",
									"pm.environment.set(\"token\", token);",
									"pm.globals.set(\"signedInUser\", true);",
									"",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"validate message\", function () {",
									"        pm.expect(responseBody.message).to.eql(\"Operation is successfully executed\")",
									"    });",
									"",
									"",
									"pm.test(\"validate user message\", function () {",
									"        pm.expect(responseBody.userMessage).to.eql(\"Your request has been processed successfully\")",
									"    });",
									"",
									"pm.test(\"value of success key is true\", function () {",
									"        pm.expect(responseBody.success).to.eql(true)",
									"    });",
									"",
									"pm.test(\"Verify phone number\", function(){",
									"    pm.expect(responseBody.data.user.phone).to.eql(pm.globals.get(\"phoneNumber\"));",
									"",
									"})",
									"",
									"pm.test(\"Verify that token gets returned in the response of sign in API\", function(){",
									"    pm.expect(responseBody.data.token).not.NaN;",
									"",
									"})",
									"",
									"",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "a239db1b-6ed7-4df7-89d3-30c2dcc48752",
								"exec": [
									"pm.globals.set(\"phoneNumber\", \"923218056762\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"phone\": \"{{phoneNumber}}\",\n    \"password\": \"hyprConsumerSignIn\",\n    \"company_code\" : \"{{companyCode}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl}}/auth/signinCustomer",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"auth",
								"signinCustomer"
							]
						}
					},
					"response": []
				},
				{
					"name": "Set Terms Accepted",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "71ea6f84-103e-4962-936f-3b555fa60104",
								"exec": [
									"signedInUser = pm.globals.get(\"signedInUser\");",
									"",
									"if(signedInUser == true){",
									"    pm.test(\"Status code is 200\", function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"}",
									"",
									"else{",
									"     pm.test(\"Status code is 401 If auth token is null\", function () {",
									"        pm.response.to.have.status(401);",
									"    });",
									"",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"phone\": \"{{phoneNumber}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl}}/customer/setTermsAccepted",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"customer",
								"setTermsAccepted"
							]
						}
					},
					"response": []
				},
				{
					"name": "FETCH ALL CATEGORIES",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "296161ad-bce0-4b12-bcce-25b1577280bf",
								"exec": [
									"responseBody = JSON.parse(responseBody)",
									"",
									"",
									"signedInUser = pm.globals.get(\"signedInUser\");",
									"",
									"if(signedInUser == true){",
									"",
									"    pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"    });",
									"",
									"    pm.test(\"validate message\", function () {",
									"        pm.expect(responseBody.message).to.eql(\"Operation is successfully executed\")",
									"    });",
									"",
									"    pm.test(\"validate user message\", function () {",
									"        pm.expect(responseBody.userMessage).to.eql(\"Your request has been processed successfully\")",
									"    });",
									"",
									"    pm.test(\"value of success key is true\", function () {",
									"        pm.expect(responseBody.success).to.eql(true)",
									"    });",
									"}",
									"",
									"else{",
									"     pm.test(\"Status code returned is 200 If auth token is null\", function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"    ",
									"",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{token}}"
							}
						],
						"url": {
							"raw": "{{baseurl}}/categories/getAllCategories?location_id={{locationId}}&page=1&per_page=10",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"categories",
								"getAllCategories"
							],
							"query": [
								{
									"key": "location_id",
									"value": "{{locationId}}"
								},
								{
									"key": "page",
									"value": "1"
								},
								{
									"key": "per_page",
									"value": "10"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET PRODUCTS BY CATEGORY",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7eaaf87b-e6ec-4c2e-920d-59859693d39f",
								"exec": [
									"responseBody = JSON.parse(responseBody)",
									"productsArray = responseBody.data.products",
									"",
									"pm.environment.set(\"productsArray\", JSON.stringify(productsArray));",
									"",
									"signedInUser = pm.globals.get(\"signedInUser\");",
									"",
									"if(signedInUser == true){",
									"    pm.test(\"Status code is 200\", function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"",
									"    pm.test(\"validate message\", function () {",
									"        pm.expect(responseBody.message).to.eql(\"Operation is successfully executed\")",
									"    });",
									"",
									"    pm.test(\"validate user message\", function () {",
									"        pm.expect(responseBody.userMessage).to.eql(\"Your request has been processed successfully\")",
									"    });",
									"",
									"    pm.test(\"value of success key is true\", function () {",
									"        pm.expect(responseBody.success).to.eql(true)",
									"    });",
									"}",
									"else{",
									"    pm.test(\"Status code returned is 200 If auth token is null\", function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"    ",
									"",
									"",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}"
							}
						],
						"url": {
							"raw": "{{baseurl}}/product/getProductByCategory?per_page=10&category_id={{categoryId}}&page=1",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"product",
								"getProductByCategory"
							],
							"query": [
								{
									"key": "per_page",
									"value": "10"
								},
								{
									"key": "category_id",
									"value": "{{categoryId}}"
								},
								{
									"key": "page",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "CREATE CART",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "8cc3c1e6-b37f-4d63-9449-3e95376fb67c",
								"exec": [
									"//product details fetched using get prodyuct ",
									"productsArray = pm.environment.get(\"productsArray\");",
									"locationId = pm.environment.get(\"locationId\")",
									"productsArray = JSON.parse(productsArray)",
									"cartItems = []",
									"",
									"product = {\"product_sku\": productsArray[0].sku, \"quantity\": productsArray[0].stock_quantity\t- 1}",
									"",
									"cartItems.push(product)",
									"",
									"",
									"createCartBody = {",
									"    \"location_id\": locationId,",
									"\t\"cartItems\": cartItems",
									"}",
									"console.log(createCartBody)",
									"pm.environment.set(\"createCartBody\", JSON.stringify(createCartBody));",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "1cd51d0d-fc2b-4eb3-a4c6-19b006a59ebb",
								"exec": [
									"response_data = JSON.parse(responseBody);",
									"pm.globals.set(\"orderHasBeenPlaced\", false);",
									"",
									"",
									"signedInUser = pm.globals.get(\"signedInUser\");",
									"",
									"if(signedInUser == true){",
									"    pm.test(\"Status code is 200\", function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"    cart_id = response_data.data.result.id",
									"    pm.environment.set(\"cart_id\", cart_id);",
									"    var productsArray = JSON.parse(pm.environment.get(\"productsArray\"));",
									"    //console.log(productsArray[0].location_prices[0].price)",
									"    pm.test(\"cart items array has 1 item\", function () {",
									"        pm.expect(response_data.data.result.cartItems.length).to.eql(1)",
									"    });",
									"",
									"    pm.test(\"validate message\", function () {",
									"        pm.expect(response_data.message).to.eql(\"Operation is successfully executed\")",
									"    });",
									"",
									"    pm.test(\"validate user message\", function () {",
									"        pm.expect(response_data.userMessage).to.eql(\"Your request has been processed successfully\")",
									"    });",
									"",
									"    pm.test(\"coupon has not been applied\", function () {",
									"        pm.expect(response_data.data.result.is_coupon).to.eql(0)",
									"    });",
									"",
									"    pm.test(\"coupon discount is 0\", function () {",
									"        pm.expect(response_data.data.result.coupon_discount).to.eql(0)",
									"    });",
									"",
									"    pm.test(\"value of success key is true\", function () {",
									"        pm.expect(response_data.success).to.eql(true)",
									"    });",
									"",
									"    ",
									"}",
									"",
									"else{",
									"     pm.test(\"Status code returned is 401 If auth token is null\", function () {",
									"        pm.response.to.have.status(401);",
									"    });",
									"    ",
									"",
									"}",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{createCartBody}}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{baseurl}}/order/createOrderFromCart",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"order",
								"createOrderFromCart"
							]
						}
					},
					"response": []
				},
				{
					"name": "UPDATE CART",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "96ee5000-eca3-40ce-869d-04cfbd1ad377",
								"exec": [
									"responseBody = JSON.parse(responseBody)",
									"productsArray = pm.environment.get(\"productsArray\");",
									"productsArray = JSON.parse(productsArray)",
									"",
									"",
									"",
									"signedInUser = pm.globals.get(\"signedInUser\");",
									"if(signedInUser == true){",
									"    pm.test(\"Status code is 200\", function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"    numberOfItemsInCart = responseBody.data.result.cartItems.length",
									"",
									"    ",
									"",
									"    pm.test(\"validate cart id\", function () {",
									"        pm.expect(responseBody.data.result.id).to.eql(pm.environment.get(\"cart_id\"))",
									"    ;",
									"    });",
									"",
									"    pm.test(\"Validate number of items in the cart after the cart has been updated\", function(){",
									"        pm.expect(numberOfItemsInCart).to.eql(productsArray.length);",
									"    ",
									"    });",
									"",
									"    pm.test(\"validate message\", function () {",
									"        pm.expect(responseBody.message).to.eql(\"Operation is successfully executed\")",
									"    });",
									"",
									"    pm.test(\"validate user message\", function () {",
									"        pm.expect(responseBody.userMessage).to.eql(\"Your request has been processed successfully\")",
									"    });",
									"",
									"    pm.test(\"value of success key is true\", function () {",
									"        pm.expect(responseBody.success).to.eql(true)",
									"    });",
									"}",
									"",
									"else{",
									"    pm.test(\"Status code returned is 401 If auth token is null\", function () {",
									"        pm.response.to.have.status(401);",
									"    });",
									"   ",
									"",
									"}",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "c4a6ef6a-c14e-4079-a2f6-1abd0bb7677b",
								"exec": [
									"cartId = pm.environment.get(\"cart_id\");",
									"",
									"createCartBody = pm.environment.get(\"createCartBody\");",
									"createCartBody = JSON.parse(createCartBody);",
									"",
									"productsArray = pm.environment.get(\"productsArray\");",
									"productsArray = JSON.parse(productsArray)",
									"",
									"updateCartBody = { \"cartId\": cartId ,\"cartItems\":createCartBody.cartItems}",
									"for(i=1; i< productsArray.length; i++){",
									"        product =  { \"product_sku\": productsArray[i].sku, \"quantity\": productsArray[i].stock_quantity/2}",
									"        updateCartBody.cartItems.push(product)",
									"",
									"}",
									"",
									"pm.environment.set(\"updateCartBody\", JSON.stringify(updateCartBody));",
									"console.log(createCartBody)",
									"",
									"",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{updateCartBody}}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{baseurl}}/order/updateOrderFromCart",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"order",
								"updateOrderFromCart"
							]
						}
					},
					"response": []
				},
				{
					"name": "RESERVE CART",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9f211933-4fba-4866-9de8-aa1ba91a783a",
								"exec": [
									"responseBody = JSON.parse(responseBody)",
									"orderHasBeenPlaced = pm.globals.get(\"orderHasBeenPlaced\");",
									"",
									"signedInUser = pm.globals.get(\"signedInUser\");",
									"",
									"if(signedInUser == true){",
									"    if (orderHasBeenPlaced == false){",
									"        pm.test(\"Status code is 200\", function () {",
									"            pm.response.to.have.status(200);",
									"        });",
									"",
									"        pm.test(\"validate message\", function () {",
									"            pm.expect(responseBody.message).to.eql(\"Operation is successfully executed\")",
									"        });",
									"",
									"",
									"        pm.test(\"validate user message\", function () {",
									"            pm.expect(responseBody.userMessage).to.eql(\"Your request has been processed successfully\")",
									"        });",
									"",
									"        pm.test(\"value of success key is true\", function () {",
									"            pm.expect(responseBody.success).to.eql(true)",
									"        });",
									"    }",
									"",
									"    else{",
									"    pm.test(\"Status code is 400\", function () {",
									"            pm.response.to.have.status(400);",
									"        });",
									"",
									"    pm.test(\"validate error message 'ORDER ALREADY PLACED!' is returned\" , function () {",
									"        pm.expect(responseBody.message).to.eql(\"ORDER ALREADY PLACED!\")",
									"        });",
									"        ",
									"    pm.test(\"value of success key is false\", function () {",
									"            pm.expect(responseBody.success).to.eql(false)",
									"        });",
									"    }",
									"}",
									"else{",
									"     pm.test(\"Status code returned is 401 If auth token is null\", function () {",
									"        pm.response.to.have.status(401);",
									"    });",
									"",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"cartId\": \"{{cart_id}}\"\n}"
						},
						"url": {
							"raw": "{{baseurl}}/order/reservedQuantityByCart",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"order",
								"reservedQuantityByCart"
							]
						}
					},
					"response": []
				},
				{
					"name": "CREATE ORDER",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "06d2dc59-d343-4794-9006-a6229fe9900a",
								"exec": [
									"responseBody = JSON.parse(responseBody)",
									"orderHasBeenPlaced = pm.globals.get(\"orderHasBeenPlaced\");",
									"signedInUser = pm.globals.get(\"signedInUser\");",
									"",
									"console.log(pm.environment.get(\"orderHasBeenPlaced\"))",
									"console.log(orderHasBeenPlaced)",
									"",
									"if(signedInUser == true){",
									"    if(orderHasBeenPlaced == false){",
									"        pm.test(\"Status code is 200\", function () {",
									"            pm.response.to.have.status(200);",
									"        });",
									"",
									"        pm.test(\"validate message\", function () {",
									"            pm.expect(responseBody.message).to.eql(\"Operation is successfully executed\")",
									"        });",
									"",
									"",
									"        pm.test(\"validate user message\", function () {",
									"            pm.expect(responseBody.userMessage).to.eql(\"Your request has been processed successfully\")",
									"        });",
									"",
									"",
									"        pm.test(\"value of success key is true\", function () {",
									"            pm.expect(responseBody.success).to.eql(true)",
									"        });",
									"",
									"",
									"        //pm.environment.set(\"orderHasBeenPlaced\", true);",
									"",
									"        pm.globals.set(\"orderHasBeenPlaced\", true);",
									"        console.log(pm.environment.get(\"orderHasBeenPlaced\"))",
									"        postman.setNextRequest(\"RESERVE CART\");",
									"        ",
									"    }",
									"",
									"    else{",
									"        pm.test(\"Status code is 400\", function () {",
									"        pm.response.to.have.status(400);",
									"        });",
									"",
									"        pm.test(\"validate error message 'ORDER ALREADY PLACED!' is returned\" , function () {",
									"        pm.expect(responseBody.message).to.eql(\"ORDER ALREADY PLACED!\")",
									"        });",
									"        pm.test(\"value of success key is false\", function () {",
									"        pm.expect(responseBody.success).to.eql(false)",
									"        });",
									"",
									"        pm.globals.set(\"orderHasBeenPlaced\", false);",
									"        //pm.environment.set(\"orderHasBeenPlaced\", false);",
									"",
									"        pm.environment.set(\"token\", \"\");",
									"        pm.globals.set(\"signedInUser\", false);",
									"        postman.setNextRequest('Set Terms Accepted')",
									"            ",
									"    }",
									"",
									"  ",
									"}",
									"",
									"else{",
									"",
									"    pm.test(\"Status code returned is 401 If auth token is null\", function () {",
									"        pm.response.to.have.status(401);",
									"    });",
									"   ",
									"}",
									"",
									"",
									"",
									"",
									"",
									"",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"customerData\": {\n        \"customer_reference\": \"{{phoneNumber}}\",\n        \"customer_reference_type\": \"phone\",\n        \"address\": \"xyz\",\n        \"address_line_1\": \"xyz\",\n        \"address_line_2\": \"xyz\",\n        \"city\": \"Lahore\",\n        \"name\": \"dawood\",\n        \"phone\": \"{{phoneNumber}}\"\n    },\n    \"location_id\": {{locationId}},\n    \"cart_id\": \"{{cart_id}}\",\n    \"payment_type\": \"COD\",\n    \"payment_reference\": \"HYPR_STAGE_CHECK\",\n    \"deliveryTime\": \"2020-12-20T12:02:00\"\n}"
						},
						"url": {
							"raw": "{{baseurl}}/order/placeOrderFromCart",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"order",
								"placeOrderFromCart"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "3946a8a0-5be1-46e3-9b21-2175f3b95b78",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "574a7e3a-26e1-4d66-8e5e-1b55dba24111",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"protocolProfileBehavior": {}
}